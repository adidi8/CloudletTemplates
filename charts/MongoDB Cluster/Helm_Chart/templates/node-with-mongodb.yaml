apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace  }}
  annotations:
    openshift.io/description: 'Sample Node.js+MongoDB App'
    openshift.io/display-name: 'Sample Node.js+MongoDB App'
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.APPLICATION_NAME }}
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - port: 443
    targetPort: 8443
  selector:
    deploymentConfig: {{ .Values.APPLICATION_NAME }}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    description: Route for application's http service.
  labels:
    application: {{ .Values.APPLICATION_NAME }}
  name: {{ .Values.APPLICATION_NAME }}
  namespace: {{ .Values.namespace }}
spec:
  host: "{{ .Values.APPLICATION_NAME }}-{{ .Values.namespace }}.apps.{{ template "cluster_fqdn" . }}"
  to:
    kind: Service
    name: {{ .Values.APPLICATION_NAME }}
  tls:
    termination: passthrough
    insecureEdgeTerminationPolicy: Redirect
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-config
  namespace: {{ .Values.namespace }}
data:
  NAMESPACE: {{ index .Values "mongodb-cluster" "global" "namespaceOverride" }}
  REPLICA_SET: {{ index .Values "mongodb-cluster" "replicaSetName" }}
  APPLICATION_NAME: {{ .Values.APPLICATION_NAME }}
---
apiVersion: v1
kind: Secret
data:
  DB_USERNAME: {{ index .Values "mongodb-cluster" "username" | toString | b64enc }}
  DB_PASSWORD: {{ index .Values "mongodb-cluster" "password" | toString | b64enc }}
metadata:
  name: node-secret
  namespace: {{ .Values.namespace }}
type: Opaque
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    application: {{ .Values.APPLICATION_NAME }}
  name: {{ .Values.APPLICATION_NAME }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    deploymentConfig: {{ .Values.APPLICATION_NAME }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        application: {{ .Values.APPLICATION_NAME }}
        deploymentConfig: {{ .Values.APPLICATION_NAME }}
      name: {{ .Values.APPLICATION_NAME }}
    spec:
      containers:
      - name: {{ .Values.APPLICATION_NAME }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        env:
          - name: APPLICATION_NAME
              valueFrom:
                configMapKeyRef:
                  name: node-config
                  key: APPLICATION_NAME
          - name: NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: node-config
                  key: NAMESPACE
          - name: REPLICA_SET
              valueFrom:
                configMapKeyRef:
                  name: node-config
                  key: REPLICA_SET
          - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: node-secret
                  key: DB_USERNAME
          - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: node-secret
                  key: DB_PASSWORD
        livenessProbe:
          httpGet:
            path: /health-check
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 2
        ports:
        - containerPort: 8443
          name: http
          protocol: TCP
      terminationGracePeriodSeconds: 75
  triggers:
  - type: ConfigChange